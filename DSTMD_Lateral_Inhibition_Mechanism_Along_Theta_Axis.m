function [Inhibition_Outputs] = DS_STMD_Lateral_Inhibition_Mechanism_Along_Theta_Axis(Input,Kernel,M,N,DS_STMD_Directions)

% 函数说明
% 该函数用于实现沿 Theta 轴的侧抑制

% 参数说明
% Input     DS-STMD 的输出（默认有八个方向）
% Kernel         侧抑制核


%% Main Function
Inhibition_Outputs = zeros(M,N,DS_STMD_Directions);

% 1
Inhibition_Outputs(:,:,1) = Input(:,:,1)*Kernel(5) + Input(:,:,2)*Kernel(1)+...
                            Input(:,:,3)*Kernel(3) + Input(:,:,4)*Kernel(7)+...
                            Input(:,:,5)*Kernel(2) + Input(:,:,6)*Kernel(4)+...
                            Input(:,:,7)*Kernel(6) + Input(:,:,8)*Kernel(8);
% 2
Inhibition_Outputs(:,:,2) = Input(:,:,1)*Kernel(1) + Input(:,:,2)*Kernel(5)+...
                            Input(:,:,3)*Kernel(3) + Input(:,:,4)*Kernel(7)+...
                            Input(:,:,5)*Kernel(4) + Input(:,:,6)*Kernel(2)+...
                            Input(:,:,7)*Kernel(8) + Input(:,:,8)*Kernel(6);

% 3
Inhibition_Outputs(:,:,3) = Input(:,:,1)*Kernel(3) + Input(:,:,2)*Kernel(7)+...
                            Input(:,:,3)*Kernel(5) + Input(:,:,4)*Kernel(1)+...
                            Input(:,:,5)*Kernel(4) + Input(:,:,6)*Kernel(6)+...
                            Input(:,:,7)*Kernel(2) + Input(:,:,8)*Kernel(8);

% 4
Inhibition_Outputs(:,:,4) = Input(:,:,1)*Kernel(3) + Input(:,:,2)*Kernel(7)+...
                            Input(:,:,3)*Kernel(1) + Input(:,:,4)*Kernel(5)+...
                            Input(:,:,5)*Kernel(2) + Input(:,:,6)*Kernel(8)+...
                            Input(:,:,7)*Kernel(4) + Input(:,:,8)*Kernel(6);

                        
                        
% 5
Inhibition_Outputs(:,:,5) = Input(:,:,1)*Kernel(2) + Input(:,:,2)*Kernel(4)+...
                            Input(:,:,3)*Kernel(6) + Input(:,:,4)*Kernel(8)+...
                            Input(:,:,5)*Kernel(5) + Input(:,:,6)*Kernel(3)+...
                            Input(:,:,7)*Kernel(1) + Input(:,:,8)*Kernel(7);

% 6
Inhibition_Outputs(:,:,6) = Input(:,:,1)*Kernel(4) + Input(:,:,2)*Kernel(8)+...
                            Input(:,:,3)*Kernel(6) + Input(:,:,4)*Kernel(2)+...
                            Input(:,:,5)*Kernel(3) + Input(:,:,6)*Kernel(5)+...
                            Input(:,:,7)*Kernel(7) + Input(:,:,8)*Kernel(1);

% 7
Inhibition_Outputs(:,:,7) = Input(:,:,1)*Kernel(4) + Input(:,:,2)*Kernel(2)+...
                            Input(:,:,3)*Kernel(8) + Input(:,:,4)*Kernel(6)+...
                            Input(:,:,5)*Kernel(1) + Input(:,:,6)*Kernel(3)+...
                            Input(:,:,7)*Kernel(5) + Input(:,:,8)*Kernel(7);

% 8
Inhibition_Outputs(:,:,8) = Input(:,:,1)*Kernel(2) + Input(:,:,2)*Kernel(4)+...
                            Input(:,:,3)*Kernel(8) + Input(:,:,4)*Kernel(6)+...
                            Input(:,:,5)*Kernel(3) + Input(:,:,6)*Kernel(1)+...
                            Input(:,:,7)*Kernel(7) + Input(:,:,8)*Kernel(5);
                        
                        
                    
% Half-Wave Rectification

Inhibition_Outputs = (abs(Inhibition_Outputs)+Inhibition_Outputs)*0.5;



end

